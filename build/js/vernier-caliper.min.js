/**
 * @badeggg
 * 2016.3.7 start coding
 * 控制拖动
 */
define('slide',[],function () {
  var slide = function(){
    slide.mainSlideSystem();
  };
  var dragElements = [];
  dragElements.push(document.getElementById('deep'));
  dragElements.push(document.getElementById('vernier2'));
  dragElements.push(document.getElementById('vernier1'));
  
  var lastX = 0;
  var MIN_SIZE = 0;              //实际上最小值
  var MAX_SIZE = 726;            
  var minSize = MIN_SIZE;        //允许其他模块设置的，希望它的最小值
  var maxSize = MAX_SIZE;
  
  //mainSlideSystem处理拖动游标尺的相关动作
  slide.mainSlideSystem = function () {
    var triggerDragElement = document.getElementById('vernier1');
    triggerDragElement.addEventListener('mousedown', startDrag, false);
    document.addEventListener('mouseleave', endDrag, false);

    var mouseStartX = 0;
    var dragingFlag = false;
    function startDrag(event) {
      event.stopPropagation();
      event.preventDefault();
      dragingFlag = true;
      mouseStartX = event.pageX;
      triggerDragElement.style.cursor = 'url(src/img/hand4.png), ew-resize';
      document.addEventListener('mousemove', draging, false);
      document.addEventListener('mouseup', endDrag, false);
    }
    var draging = (function(){
      var lastLeft = -1;
      return function (event) {
        var tmp = event.pageX - mouseStartX + lastX;
        tmp < minSize && (tmp = minSize);
        tmp > maxSize && (tmp = maxSize);
        if(lastLeft !== tmp){
          lastLeft = tmp;
          dragElements.forEach(function (elem) {
            elem.style.left = tmp + 'px';
          });
          slide.slideEventTarget.dispatchEvent( new CustomEvent('slide', {detail: tmp}) );
        }
      }
    }());
    function endDrag(event) {
      if (!dragingFlag) {
        return;
      }
      dragingFlag = false;
      lastX = parseInt(dragElements[0].style.left);
      triggerDragElement.style.cursor = 'url(src/img/hand3.png), ew-resize';
      document.removeEventListener('mousemove', draging, false);
      document.removeEventListener('mouseup', endDrag, false);
    }
  };
  
  slide.slideEventTarget = document.createElement('div'); //其他模块可利用此属性绑定事件
  
  slide.setSize = function(size){
    if(typeof size === 'string' && size.indexOf('>=') >= 0){
      size = parseInt( size.slice(2) );
      if( parseFloat( dragElements[0].style.left ) < size && size >= minSize && size <= maxSize){
        set();
      }
    }else if(typeof size === 'number' && size >= minSize && size <= maxSize){
      set();
    }
    function set(){
      dragElements.forEach(function (elem) {
        elem.style.left = size + 'px';
      });
      slide.slideEventTarget.dispatchEvent( new CustomEvent('slide', {detail: size}) );
      lastX = size;
    }
  };
  
  slide.setMinSize = function(size){
    if(size >= MIN_SIZE && size <= MAX_SIZE){
      minSize = size;
    }
  }
  
  return slide;
});

/**
 * @badeggg
 * 2016.3.7 start
 * 放大镜
 */
define('magnifier',['slide'], function(slide){
  var magnifier = function(){
    magnifier.magSystem();
  };
  
  
  magnifier.magSystem = function(){ //正在测量的“零件”，需要“放大”
    var magnifierElem = document.getElementById('magnifier');
    var dragingFlag = false;
    var mouseStartX = 0;
    var mouseStartY = 0;
    var lastX = parseInt(magnifierElem.style.left);
    var lastY = parseInt(magnifierElem.style.top);
    var slideLeft = parseInt(document.getElementById('deep').style.left); //游标尺滑了多远
    var ratio = 2000 / document.getElementById('main-container').getBoundingClientRect().width; //2000是图片的宽度@todo
    var slideMultiRatio = slideLeft*ratio;
    function startDrag(event) {
      event.stopPropagation();
      event.preventDefault();
      dragingFlag = true;
      mouseStartX = event.pageX;
      mouseStartY = event.pageY;
      slideLeft = parseInt(document.getElementById('deep').style.left);
      slideMultiRatio = slideLeft*ratio;
      document.addEventListener('mousemove', draging, false);
      document.addEventListener('mouseup', endDrag, false);
      magnifierElem.style.cursor = "url('src/img/hand2.png'), move";
    }
    function draging(event) {
      var tmpX = event.pageX - mouseStartX + lastX;
      var tmpY = event.pageY - mouseStartY + lastY;
      magnifierElem.style.left = tmpX + 'px';
      magnifierElem.style.top = tmpY + 'px';
      drawCanvas(tmpX, tmpY); //参数是放大镜的左上角坐标（其left,top值）
    }
    function endDrag(event) {
      if (!dragingFlag) {
        return;
      }
      dragingFlag = false;
      lastX = parseInt(magnifierElem.style.left);
      lastY = parseInt(magnifierElem.style.top);
      document.removeEventListener('mousemove', draging, false);
      document.removeEventListener('mouseup', endDrag, false);
      magnifierElem.style.cursor = "url('src/img/hand1.png'), move";
    }

    slide.slideEventTarget.addEventListener('slide', function(event){
      slideLeft = parseInt(document.getElementById('deep').style.left);
      slideMultiRatio = slideLeft*ratio;
      drawCanvas(lastX, lastY);
    }, false);
    
    var magnifierWidth = 150; //放大镜的大小，canvas的大小，唯一的值，不再变化
    var canvas = document.getElementById('canvas');
    canvas.setAttribute('width', magnifierWidth);
    canvas.setAttribute('height', magnifierWidth);

    var drawCanvas = (function () {
      var img1 = new Image();
      var img2 = new Image();
      var img3 = new Image();
      var img4 = new Image();
      img1.src = 'src/img/deep.png';
      img2.src = 'src/img/vernier2.png';
      img3.src = 'src/img/main.png';
      img4.src = 'src/img/vernier1.png';
      var imgReadyList = [];
      imgReadyList.length = 4;
      function imgReadyListChange(n, img) {
        img.style.display = 'none';
        imgReadyList[n - 1] = img;
      }
      var ctx = canvas.getContext('2d');
      var halfMagnifierWidth = magnifierWidth / 2;
      ctx.arc(halfMagnifierWidth, halfMagnifierWidth, halfMagnifierWidth, 0, 2 * Math.PI, false);
      ctx.clip();
      img1.onload = imgReadyListChange(1, img1);
      img2.onload = imgReadyListChange(2, img2);
      img3.onload = imgReadyListChange(3, img3);
      img4.onload = imgReadyListChange(4, img4);
      
      function ret(x, y) {    //参数是放大镜的左上角坐标
        ctx.clearRect(0, 0, magnifierWidth, magnifierWidth);
        x = Math.round( (x + halfMagnifierWidth) * ratio - halfMagnifierWidth );
        y = Math.round( (y + halfMagnifierWidth) * ratio - halfMagnifierWidth );
        var xMove = Math.round(x - slideMultiRatio);
        if(imgReadyList[0] && imgReadyList[1] && imgReadyList[2] && imgReadyList[3]){
          ctx.drawImage(imgReadyList[0], xMove, y, magnifierWidth, magnifierWidth, 0, 0, magnifierWidth, magnifierWidth);
          ctx.drawImage(imgReadyList[1], xMove, y, magnifierWidth, magnifierWidth, 0, 0, magnifierWidth, magnifierWidth);
          ctx.drawImage(imgReadyList[2], x, y, magnifierWidth, magnifierWidth, 0, 0, magnifierWidth, magnifierWidth);
          ctx.drawImage(imgReadyList[3], xMove, y, magnifierWidth, magnifierWidth, 0, 0, magnifierWidth, magnifierWidth);
        }
        
        //如果需要测量某个零件，需要放大
        if( magnifier.measureStuffMessage ){
          var stuff = magnifier.measureStuffMessage;
          ctx.drawImage(stuff.entity, Math.round(x - stuff.left*ratio), Math.round(y - stuff.top*ratio), magnifierWidth, magnifierWidth, 0, 0, magnifierWidth, magnifierWidth);
        }
      }
      return ret;
    }());
    
    drawCanvas(lastX, lastY);
    setTimeout(drawCanvas, 500, lastX, lastY);
    magnifierElem.addEventListener('mousedown', startDrag, false);
    document.addEventListener('mouseleave', endDrag, false);
  };
  
  
  magnifier.setMeasureStuff = (function(){
    var measureStuffImgs = {
      measure120: new Image(),
      measure123: new Image(),
      measure112: new Image()
    };
    measureStuffImgs.measure120.src = 'src/img/To_measure_120.png';
    measureStuffImgs.measure123.src = 'src/img/To_measure_123.png';
    measureStuffImgs.measure112.src = 'src/img/To_measure_112.png';
    
    var measureBoxElem = document.getElementById('measure-box');
    measureBoxElemLeft = parseInt( getComputedStyle( measureBoxElem ).left );
    measureBoxElemTop = parseInt( getComputedStyle( measureBoxElem ).top );
    
    var measureStuffElems = {
      measure120: document.getElementById('measure120'),
      measure123: document.getElementById('measure123'),
      measure112: document.getElementById('measure112')
    };
    
    var ret = function( measureStuffId ){
      if( !measureStuffId ){
        magnifier.measureStuffMessage = null;
      }else{
        magnifier.measureStuffMessage = {
          left: measureBoxElemLeft,
          top: measureBoxElemTop + parseInt( getComputedStyle( measureStuffElems[measureStuffId] ).marginTop ),
          entity: measureStuffImgs[measureStuffId]
        };
      }
    };
    
    return ret;
    
  }());
  
  return magnifier;
  
});

/**
 * @badeggg
 * 2016.3.12 start
 * 计算、显示结果
 */
define('result',['slide'], function(slide){
  var resultNum = document.querySelector('#result>.num');
  var resultModelElem = document.getElementById('resultModel');
  var resultEle = document.getElementById('result');
  var model = 1; //0: always show, 1: mouseover show
  var result = function(){
    slide.slideEventTarget.addEventListener('slide', function(event){
      resultNum.textContent = (event.detail/6).toFixed(1);
    }, false);
    
    //交互好一点
    function mouseoverShow(){
      this.style.backgroundColor = '#5D5D58';
    }
    function mouseoutHide(){
      this.style.backgroundColor = 'gold';
    }
    function changeToMouseoverShow(){
      model = 1;
      resultEle.style.backgroundColor = 'gold';
      resultModelElem.style.backgroundColor = '#5D5D58';
      resultEle.addEventListener('mouseover', mouseoverShow, false);
      resultEle.addEventListener('mouseout', mouseoutHide, false);
      resultEle.style.cursor = 'pointer';
      resultEle.addEventListener('click', changeToAlwaysShow, false);
    }
    function changeToAlwaysShow(){
      model = 0;
      resultEle.style.backgroundColor = '#5D5D58';
      resultModelElem.style.backgroundColor = 'gold';
      resultEle.removeEventListener('mouseover', mouseoverShow, false);
      resultEle.removeEventListener('mouseout', mouseoutHide, false);
      resultEle.style.cursor = 'default';
      resultEle.removeEventListener('click', changeToMouseoverShow, false);
    }
    changeToMouseoverShow();
    resultModelElem.addEventListener('click', function(){
      if(model === 0){
        changeToMouseoverShow();
      }else{
        changeToAlwaysShow();
      }
    }, false);
  };
  return result;
});

/**
 * @badeggg
 * 2016.4.21 start coding
 * 开始
 */
define('teach',[],function(){
  var teach = function(){
    teach.animation();
    teach.insertHTML();
  };
  teach.insertHTML = function(){
    var insertHTMLString = "<blockquote><h3>如何使用本课件</h3><ul><li><p>游标卡尺的读数显示在页面右上角----读数显示区域</p></li><li><p>鼠标拖动副尺子，游标卡尺的读数会随着变化</p></li><li><p>鼠标拖动“放大镜”可以看到清晰的刻度</p></li><li><p>点击读数显示区域右上角的小圆点，读数将隐藏，只有在鼠标停留在读数显示区域时，才能看见读数。可以借此来练习</p></li><li><p>再次点击读数显示区域或者小圆点，读数将显示</p></li></ul><hr/><h3>什么是游标卡尺？</h3><blockquote><p>游标卡尺，又称为游标尺子或直游标尺子，是一种测量长度的仪器。由主尺子和附在主尺子上能滑动的游标两部分构成。主尺子一般以毫米为单位。根据分格的不同，游标卡尺可分为十分度游标卡尺、二十分度游标卡尺、五十分度格游标卡尺等。本课件中的游标卡尺是一个十分度游标卡尺。</p></blockquote><h3>各个部件的名称</h3><p><img src='https://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Vernier_caliper.svg/500px-Vernier_caliper.svg.png'alt='游标卡尺样图'title=''width=100%/></p><ul><li>1.外测量爪</li><li>2.内测量爪</li><li>3.深度杆</li><li>4.主尺子(cm)</li><li>5.主尺子(in)</li><li>6.副尺子（cm）</li><li>7.副尺子（in）</li><li>8.推扣</li></ul><h3>原理：</h3><blockquote><p>以本课件中的游标卡尺为例。主尺子上的29mm（29个最小格）对应副尺子上的10个格，那么副尺子上每个格的长度为：29/10=2.9mm。当主、副尺子上的零刻度线对齐时，副尺子上的'1'刻度线在主尺子上的3mm刻度线左侧0.1mm处，副尺子上的'2'刻度线在主尺子上的6mm刻度线左侧0.2mm处，副尺子上的'3'刻度线......那么当副尺子向右移动0.1mm的时候（此时内外测量爪的间距也增大了1mm），副尺子上的'1'刻度线与主尺子的3mm刻度线对齐；当副尺子向右移动0.2mm的时候,副尺子上的'2'刻度线与主尺子上的6mm刻度线对齐......</p><p>因此游标卡尺可以测量0.1mm, 0.2mm, 0.3mm, 0.4mm... 0.9mm</p><p>以此为基础推广一下：当副尺子上的零刻度线与主尺子上的任意一条刻度线对齐后（比如与24mm对齐），再把副尺子向右移动0.x mm（比如0.7mm）,此时副尺子上的7刻度线与主尺子上的某一条刻度线对齐（可以算一下，是45mm），尺子读数为主尺子上的刻度值（精确度为1mm）+副尺子与主尺子的刻度线重叠的刻度值（精确度为0.1mm），例子为:24mm+0.7mm=24.7mm。</p><p>这样的尺子的精确度为0.1mm.</p><p>如果把副尺子上的10格改成20格（10格的总距离和20格的总距离一样），精确度会怎样变化？</p><blockquote><p>|-->精确度将变为0.05mm.可以套用上面的讲解思考。</p></blockquote><p>精确度是0.02mm的游标卡尺是怎样的？</p><blockquote><p>|-->副尺子上有50小格，每一个小格的长度比整数毫米小0.02mm</p></blockquote><p>如果副尺子上有十个均匀的小格，十个小格的总长度为8mm，这样的游标卡尺能不能用？</p><blockquote><p>|-->不能。思考之</p></blockquote></blockquote><h3>读数</h3><ul><li>1.先读主尺子的刻度值，精密度为 1 毫米，副尺子位于 24 与 25 之间，所以主尺子刻度为 24 毫米。</li><li>2.再看副尺子与主尺子的刻度线重叠的刻度，精密度为 0.1 毫米，附尺子 7 与主尺子重叠，所以副尺子刻度为 0.7 毫米。</li><li>3.将主尺子与副尺子数值相加上面刻度代表 24.7 毫米。</li></ul></blockquote><p><img src='https://upload.wikimedia.org/wikipedia/commons/f/f6/Using_the_caliper_new.gif'alt='游标卡尺读数'title=''width=100%/></p>";
    var insertedHTMLContainer = document.createElement('div');
    insertedHTMLContainer.setAttribute('id', 'inserted-HTML-container');
    document.getElementById('teach').appendChild( insertedHTMLContainer );
    insertedHTMLContainer.innerHTML = insertHTMLString;
    var tmp = insertedHTMLContainer.querySelectorAll('img');
    tmp[0].src = 'src/img/500px-Vernier_caliper.svg.png';
    tmp[1].src = 'src/img/Using_the_caliper_new.gif';
  };
  teach.animation = function(){
    var buttonAnimationStyle = 'background-color: gold; right: 2px;',
        hr1AnimationStyle = 'transform: none;',
        hr2AnimationStyle = 'background-color: #6B5C0B;',
        hr3AnimationStyle = 'transform: none;',
        teachAnimationStyle = 'right: -500px; box-shadow: none;',
        resultConAnimationStyle = 'right: 0;',
        measureTableAnimationStyle = 'right: 50px;';
    
    var buttonElem = document.getElementById('teach-button'),
        hrElems = buttonElem.querySelectorAll('hr'),
        hr1Elem = hrElems[0],
        hr2Elem = hrElems[1],
        hr3Elem = hrElems[2],
        teachElem = document.getElementById('teach'),
        resultConElem = document.querySelector('#result-container>div'),
        measureTableElem = document.querySelector('#measure>div');
    
    buttonElem.addEventListener('click', function(){
      var flag = 'out'; //表示此刻的状态
      return function(){
        if(flag === 'out'){
          buttonElem.setAttribute('style', buttonAnimationStyle);
          hr1Elem.setAttribute('style', hr1AnimationStyle);
          hr2Elem.setAttribute('style', hr2AnimationStyle);
          hr3Elem.setAttribute('style', hr3AnimationStyle);
          teachElem.setAttribute('style', teachAnimationStyle);
          resultConElem.setAttribute('style', resultConAnimationStyle);
          measureTableElem.setAttribute('style', measureTableAnimationStyle);
          flag = 'in';
        } else{
          buttonElem.setAttribute('style', '');
          hr1Elem.setAttribute('style', '');
          hr2Elem.setAttribute('style', '');
          hr3Elem.setAttribute('style', '');
          teachElem.setAttribute('style', '');
          resultConElem.setAttribute('style', '');
          measureTableElem.setAttribute('style', '');
          flag = 'out';
        }
      };
    }(), false);
    
  };
  return teach;
});

/**
 * @badeggg
 * 2016.5.1 start coding
 * 开始
 */
//火狐太他妈的变态，所有元素都是droppable的，而且drop了之后，会新打开一个标签搜索你drag的元素（以dataTransfer.setData为关键词），如果是图片直接打开图片
//html5的drag&drop好变态啊，还没有搞清楚它是怎么设计的，有时间再看一下
define('measure',['slide', 'magnifier'], function(slide, magnifier){
  var measure = function(){
    measure.setDragSystem();
  };
  measure.db = {
    stuffAtMeasureId: '',
    answerOfStuffAtMeasure: 0
  };
  window.db = measure.db;/////////////////////////////
  measure.setDragSystem = function(){
    var dndStyleChange = {
      stuffConElemToAccept: 'outline: 1px dashed black;',
      measureBoxElemToAccept: 'outline: 1px dashed black;'
    };
    
    var stuffConElems = {};
    stuffConElems.measure120 = document.querySelector('#measure>div>div[stuffCon]:nth-child(1)');
    stuffConElems.measure123 = document.querySelector('#measure>div>div[stuffCon]:nth-child(2)');
    stuffConElems.measure112 = document.querySelector('#measure>div>div[stuffCon]:nth-child(3)');
    
    var stuffElems = {};
    stuffElems.measure120 = document.getElementById('measure120');
    stuffElems.measure123 = document.getElementById('measure123');
    stuffElems.measure112 = document.getElementById('measure112');
    
    var measureBoxElem = document.getElementById('measure-box');
    
    Object.keys(stuffConElems).forEach(function(name){
      var elem = stuffConElems[name];
      elem.addEventListener('dragover', function(event){
        if(event.dataTransfer.getData('text') === name){
          evPreDefStopPro(event);
        }
      }, false);
      elem.addEventListener('drop', function(event){
        var stuffName = event.dataTransfer.getData('text');
        //如果不是在拖动那几个“零件”
        if( !stuffElems[stuffName] ){
          return;
        }
        
        (name === stuffName) && append( elem, stuffElems[stuffName] );
        elem.style = '';
      }, false);
    });
    
    measureBoxElem.addEventListener('dragover', function(event){
      if(event.dataTransfer.getData('text').indexOf('measure') >= 0){
        evPreDefStopPro(event);
      }
    }, false);
    measureBoxElem.addEventListener('drop', function(event){
      var stuffName = event.dataTransfer.getData('text');
      //如果不是在拖动那几个“零件”
      if( !stuffElems[stuffName] ){
        return;
      }
      
      if(this.children.length > 0){
        append( stuffConElems[ this.children[0].id ], this.children[0] );
      }
      append( this, stuffElems[stuffName] );
      measureBoxElem.style = '';
      measure.db.answerOfStuffAtMeasure = parseInt( stuffName.slice(-3) );
    }, false);
    
    Object.keys(stuffElems).forEach(function(name){
      var elem = stuffElems[name];
      elem.addEventListener('dragstart', function(event){
        event.dataTransfer.setData('text', name);
        slide.setSize('>=101');
        if(name === measure.db.stuffAtMeasureId){
          stuffConElems[name].style = dndStyleChange.stuffConElemToAccept;
        }else{
          measureBoxElem.style = dndStyleChange.measureBoxElemToAccept;
        }
      });
      elem.addEventListener('dragend', function(event){
        if( measureBoxElem.children[0] ){
          measure.db.stuffAtMeasureId = measureBoxElem.children[0].id;
          magnifier.setMeasureStuff( measureBoxElem.children[0].id );
          slide.setMinSize( Math.round( parseInt(measureBoxElem.children[0].id.slice(-3)) * 0.6 ) );
        } else{
          measure.db.stuffAtMeasureId = '';
          magnifier.setMeasureStuff('');
          slide.setMinSize(0);
        }
        if(name === measure.db.stuffAtMeasureId){
          stuffConElems[name].style = '';
        }else{
          measureBoxElem.style = '';
        }
      }, false);
    });
    
    //你麻痹火狐，不让火狐重新打开标签
    document.addEventListener('dragover', function(event){
      evPreDefStopPro(event);
    });
    document.addEventListener('dragend', function(event){
      evPreDefStopPro(event);
    });
    document.addEventListener('drop', function(event){
      evPreDefStopPro(event);
    });
    
    function evPreDefStopPro(event){
      event.preventDefault();
      event.stopPropagation();
    }
    function append(parent, child){
      parent.appendChild(child);
    }
  };
  return measure;
});

/**
 * @badeggg
 * 2016.3.7 start coding
 * 开始
 */
require(['slide', 'magnifier', 'result', 'teach', 'measure'], function (slide, magnifier, result, teach, measure) {
  slide();
  magnifier();
  result();
  teach();
  measure();
});

define("start", function(){});

